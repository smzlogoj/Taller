---
title: "ModenCodeFly RNA-seq"
subtitle: "Manipulación de datos"
author: "José Antonio López Gómez"
format: 
    revealjs:
        theme: default
        highlight-style: dracula
---
## Conjunto de datos

```{r}
#| echo: true
#| output-location: fragment

df <- read.csv('data/modencodefly_count_table.csv')

head(df)
```

## Metadatos

```{r}
#| echo: true
#| output-location: fragment

phenodata <- read.csv('data/modencodefly_phenodata.csv')

head(phenodata, 10)
```

## Fenotipos seleccionados {.smaller}


```{r}
#| echo: true
#| output-location: fragment

fenotipos <- c('L1Larvae', 'L2Larvae')

df.fenotipos <- phenodata[phenodata$stage %in% fenotipos, c('sample.id', 'stage')]

df.fenotipos
```
## Filtrar las muestras seleccionadas
```{r}
#| echo: true
#| output-location: fragment

df.sub <- df[, names(df) %in% df.fenotipos$sample.id]

head(df.sub)
```
## Añadir los genes
```{r}
#| echo: true
#| output-location: fragment
rownames(df.sub) <- df$gene

head(df.sub)
dim(df.sub)
```

## Eliminar genes con 0 o pocas counts {.smaller}
```{r}
#| echo: true
#| output-location: fragment
head(rowSums(df.sub))
```
. . .
```{r}
#| echo: true
#| output-location: fragment
keep <- rowSums(df.sub) >= 10
head(keep)
```
. . .
```{r}
#| echo: true
#| output-location: fragment
df.sub  <- df.sub [keep, ]
head(df.sub)
dim(df.sub)
```
## Normalización
Vamos a normalizar los datos de RNA-seq usando [DESeq2’s median of ratios](https://hbctraining.github.io/DGE_workshop/lessons/02_DGE_count_normalization.html). Este metodo consiste en los siguientes pasos:

- Crear una muestra de pseudo-referencia usando la media geométrica.
- Calcular el ratio de cada muesta a la referencia.
- Calcular el factor de normalización para cada muestra.
- Calcular los valores normalizados usando el factor de normalización.

## Pseudo-referencia {.smaller}
Calculamos la media geométrica a lo largo de todas las muestras
raiz novena(muestra1 * muestra2 * muestra3 * ...* muestra9)
```{r}
#| echo: true
#| output-location: fragment
head(df.sub, 3)
```
. . .
```{r}
#| echo: true
#| output-location: fragment
df.sub[1, ]
```
. . .
```{r}
#| echo: true
#| output-location: fragment
media_geom <- 1
for(elemento in df.sub[1, ]) {
    media_geom <- media_geom * elemento
}
media_geom <- media_geom ^ (1/9)
media_geom
```
## Pseudo-referencia {.smaller}

```{r}
#| echo: true
#| output-location: fragment
pseudo_ref <- c()
for(ind_fila in 1:nrow(df.sub)){
    media_geom <- 1
    for(elemento in df.sub[ind_fila, ]) {
        if (elemento != 0){
            media_geom <- media_geom * elemento
        }    
    }
    media_geom <- media_geom ^ (1/9)
    pseudo_ref <- c(pseudo_ref, media_geom)
}
head(pseudo_ref)
length(pseudo_ref)
```
. . .
```{r}
#| echo: true
#| output-location: fragment
df.sub$pseudo_ref <- pseudo_ref
head(df.sub, 3)
```
## Ratio de cada muestra {.smaller}
```{r}
#| echo: true
#| output-location: fragment
head(df.sub, 2)
df.fenotipos$sample.id
```
. . .


```{r}
#| echo: true
#| output-location: fragment
for (muestra in df.fenotipos$sample.id) {
    df.sub[, paste0(muestra, '_ratio')] <- df.sub[, muestra] / df.sub[, 'pseudo_ref']
}
head(df.sub, 3)
```
## Factor de normalización para cada muestra {.smaller}
El factor de normalización es la mediana para cada ratio- muestra.
```{r}
#| echo: true
#| output-location: fragment
median(df.sub[, 'SRX008026_ratio'])
```
. . .


```{r}
#| echo: true
#| output-location: fragment
factor_normalizacion <- c()

for (muestra in paste0(df.fenotipos$sample.id, '_ratio')) {
    factor_normalizacion <- c(factor_normalizacion, median(df.sub[, muestra]))
}
names(factor_normalizacion) <- paste0(df.fenotipos$sample.id, '_ratio')

factor_normalizacion
```
## Valores normalizados{.smaller}
Dividimos cada valor por el factor de normalización correspondiente
```{r}
#| echo: true
#| output-location: fragment
head(df.sub[, 'SRX008026'] / factor_normalizacion['SRX008026_ratio'])
```
. . .

```{r}
#| echo: true
#| output-location: fragment

df.norm <- data.frame(gene = rownames(df.sub))
for (muestra in df.fenotipos$sample.id) {
    
    df.norm <- cbind(df.norm, df.sub[, muestra] / factor_normalizacion[paste0(muestra, '_ratio')])
    
}

rownames(df.norm) <- df.norm$gene
df.norm$gene <- NULL

names(df.norm) <- c(df.fenotipos$sample.id)
head(df.norm)

```

## Valores normalizados{.smaller}

```{r}
#| echo: true
#| output-location: fragment
library(reshape2)

df.norm.log <- log2(df.norm)

df.norm.log <- melt(df.norm.log)
head(df.norm.log)
```
. . .
```{r}
#| echo: true
#| output-location: fragment
df.fenotipos[df.fenotipos$stage == 'L1Larvae', ]
```
. . .
```{r}
#| echo: true
#| output-location: fragment
df.norm.log$stage <- ifelse(df.norm.log$variable %in% df.fenotipos[df.fenotipos$stage == 'L1Larvae', 'sample.id'], 'L1Larvae', 'L2Larvae')

head(df.norm.log)
```

## Figura normalización {.smaller}
```{r}
#| echo: true
#| output-location: fragment
library(ggplot2)

ggplot(df.norm.log, aes(x = variable, y = value, fill = stage)) +
    geom_boxplot() +
    theme_bw()
```